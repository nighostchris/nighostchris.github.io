{"componentChunkName":"component---src-templates-writing-js","path":"/writings/swift-cheatsheet","result":{"data":{"allWritingsJson":{"edges":[{"node":{"title":"Swift Cheatsheet","subtitle":"Simplest Swift's syntax reference to read whenever you forgot them","date":"2020-06-24","description":"So I have spent some time to take a look at Swift's syntax and I decided to make a cheatsheet for myself in case I forgot them when I am coding in the future...","length":10,"author":"Chris Liu","avatarsrc":"https://cdn.pixabay.com/photo/2015/03/04/22/35/head-659652_960_720.png","content":"<NormalText>So I have spent some time to take a look at <BoldText>Swift</BoldText>'s syntax and I decided to make a cheatsheet for myself in case I forgot them when I am coding in the future. I don't want to search and crawl the documentation all over again LOL. I write the following cheatsheet with reference to <BoldText><HyperLinkText href={`https://www.youtube.com/watch?v=FcsY1YPBwzQ`}>Learn Swift Fast (2020) - Full Course For Beginners</HyperLinkText></BoldText>.</NormalText><Breakline /><Header>Basics and Data Types</Header><Code language=\"swift\">{`// Variable Declaration\nvar str = \"Hello World!\"\n\n// Constant Declaration\nlet constStr = \"Hello World!\"\n\n// 5 main data types\nvar string: String = \"String\"\nvar integer: Integer = 1\nvar float: Float = 0.1\nvar double: Double = 0.1\nvar boolean: Bool = true\n\n// Print something out\nprint(string + \"testing\")`}</Code><Header>Operators</Header><Code language=\"swift\">{`var a = 1\nvar b = 1\nvar c = 1.5\na = a * b * a\n\npow(a, b)\nsqrt(a)\nceil(c)\nfloor(c)\n\na += 1\na -= 1\na *= 1\na /= 1\n// a = a % 1 = a mod 1\na %= 1`}</Code><Header>If and Switch</Header><Code language=\"swift\">{`let a = 25\nlet b = 10\nlet c = 1\n\n// If-else conditional statement\nif (a <= 10 || b > 5) || c != 1 {\n\tprint(\"case 1\")\n} else if (a < 15) {\n\tprint(\"case 2\")\n} else {\n\tprint(\"case 3\")\n}\n\nlet chr = \"a\"\n\n// Switch conditional statement\nswitch chr {\n\tcase \"a\":\n\t\tprint(\"It is a\")\n\tcase \"b\":\n\t\tprint(\"It is b\")\n\tdefault:\n\t\tprint(\"Default\")\n}`}</Code><Header>Loops</Header><Code language=\"swift\">{`// For Loop\nfor i in 1...10 {\n\tprint(\"i\")\n}\n\nvar counter = 10\n\n// While and Repeat-while loop\nwhile counter > 5 {\n\tcounter -= 1\n}\n\nrepeat {\n\tcounter -= 1\n} while counter > 0`}</Code><Header>Functions</Header><Code language=\"swift\">{`// Void function\nfunc printSomething() {\n\tprint(\"Running function printSomething()\"\n}\n\n// Function that will return value\nfunc returnSomething() -> Int {\n\treturn 1\n}\n\n// Function that have argument labels on parameters\nfunc addTwoNumbers(arg num1: Int, arg2 num2: Int) -> Int {\n\treturn num1 + num2\n}\n\nlet sum = addTwoNumbers(arg: 1, arg2: 2)\n\n// Function that have no argument labels\nfunc addTwoNumbers(num1: Int, num2: Int) -> Int {\n\treturn num1 + num2\n}\n\nlet sum = addTwoNumbers(num1: 1, num2: 2)\n\n// Function that does not require parameter name when called\nfunc addTwoNumbers(_ num1: Int, _ num2: Int) -> Int {\n\treturn num1 + num2\n}\n\nlet sum = addTwoNumbers(1, 2)`}</Code><Header>Array</Header><Code language=\"swift\">{`var array: [Int] = [1, 2, 3]\n\n// How to loop an array\nfor i in 0...array.count - 1 {\n\tprint(array[i])\n}\n\nfor item in array {\n\tprint(item)\n}\n\n// How to declare empty array\nvar emptyArray: [Int] = []\nvar emptyArray2 = [Int]()\n\n// Add item\narray.insert(4, at: 2)\narray += [5, 6]\narray.append(7)\n\n// Remove item\narray.remove(at: 0)\n\n// Search array\narray.firstIndex(of: 4)`}</Code><Header>Dictionary</Header><Code language=\"swift\">{`var dictionary = [String:Int]()\n\n// Assigning data into dictionary\ndictionary[\"Chris\"] = 18\ndictionary[\"anotherChris\"] = 20\ndictionary[\"thirdChris\"] = 22\n\n// Retrieve value as optionals\nlet myAge = dictionary[\"Chris\"]\n\n// Remove a key-value pair\ndictionary[\"Chris\"] = nil\n\n// How to loop a dictionary\nfor (key, value) in dictionary {\n\tprint(\"\\(key) is \\(value) years old\")\n}`}</Code><Header>Optionals</Header><Code language=\"swift\">{`// An optional data type (?) allows \"nil\" to be a value for that variable or constant\nvar a: Int? = nil\n// d can store a string or nil, but already unwrapped\nvar d: Int!\n\nclass Testing {\n\tfunc markSix() -> Int {\n\t\treturn Int.random(in: 1...10)\n\t}\n}\n\nlet b: Testing? = Testing()\n\n// Check if the optional variable contains something\nif b != nil {\n\t// Before accessing the optional variable\n\t// We need to unwrap the optional like this\n\tprint(b!.markSix())\n}\n\n// Optional binding\nif let c = b {\n\tprint(c.markSix())\n}\n\n// Optional chaining\nb?.markSix()`}</Code><Header>Class</Header><Code language=\"swift\">{`// Base class\nclass Employee {\n\tvar name: String = \"\"\n\tvar salary: Int = 0\n\tvar role: String = \"\"\n\n\tvar annualSalary: Int {\n\t\treturn salary * 12\n\t}\n\n\t// Constructors\n\tinit() {\n\t\tname = \"Employee\"\n\t}\n\n\tinit(_ name: String) {\n\t\t// So that there won't be naming conflicts\n\t\tself.name = name\n\t}\n\n\tfunc toString() {\n\t\tprint(\"My name is \\(name) and my salary is \\(salary).\") \n\t}\n}\n\nvar chris: Employee = Employee()\nchris.name = \"Chris\"\n\nvar anotherChris: Employee = Employee(\"Chris\")\n\n// Inheritance\nclass Manager: Employee {\n\tvar teamSize = 0\n\n\toverride init(_ name: String) {\n\t\tsuper.init(name)\n\t\tteamSize = 10\n\t}\n\n\toverride func toString() {\n\t\tsuper.toString()\n\t\tprint(\"I have a team of \\(teamSize) people.\")\n\t}\n}\n\nvar m: Manager = Manager(\"Manager\")\n`}</Code><Header>Designated and Convenience initializer</Header><Code language=\"swift\">{`class Square {\n\tvar name: String\n\tvar weight: Int?\n\n\t// Designated initializer\n\t// Ensure all properties are initialized\n\tinit() {\n\t\tname = \"Square\"\n\t}\n\n\t// Convenience initializer\n\tconvenience init(_ weight: Int) {\n\t\t// Call designated initializer to make sure object is ready to go\n\t\tself.init()\n\n\t\t// Initialize other members if you need\n\t\tself.weight = weight\n\t}\n}`}</Code>"}}]}},"pageContext":{"writingId":"0","belongsToPage":"/writings"}}}